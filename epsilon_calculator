#!/bin/env python2.7
import matplotlib.pyplot as plt
import pandas as pd
from scipy.interpolate import interp1d
import numpy as np


# Input and plot the HypSpec calculated molar absorptivities (epsilons)
eps = pd.read_csv('P:\Desktop/epsilons/eps_new.csv')
x= eps.iloc[:, 0]  # x value is wavelength
eps = eps.set_index('wavelength (nm)')

species1 = ['Mo', 'MoH2Cl2', 'MoH2Cl3', 'MoH', 'MoHCl']

for i in xrange(5):   # plot all columns
    plt.plot(x, eps.iloc[:, i], '--')

plt.xlabel('wavelength (nm)')
plt.ylabel('molar absorptivity (M-1 cm-1)')
plt.legend([list(eps)[i] for i in xrange(len(eps))], loc='best')  #label with headers
plt.show()


# Input and plot the HypSpec calculated species concentrations
conc = pd.read_csv('P:\Desktop/epsilons/conc_new.csv')
conc.dropna(how='all', inplace=True)
conc.dropna(how='all', inplace=True, axis='columns')

HCl_activity = np.log(conc['Total(Cl)'])  # x value is [HCl] which is proportional to log(H)
concentration = 0.0001  # must divide concentration by total to receive %
species2 = ['Free(Mo)', 'MoH2Cl2', 'MoH2Cl3', 'MoH', 'MoHCl']

for i in range(len(species2)):
    plt.plot(HCl_activity, conc[species2[i]]/concentration, '-o')


plt.xlabel('log({HCl})')
plt.ylabel('Percent abundance (%)')
plt.legend(species2, loc='best')
plt.show()


# Calculate the UV-vis spectra from the conc and epsilons
concentration = 0.01   # Molar (mol/L) same as (mol/dm^3)
path_length = 0.01   # !!!! centimeters !!!!
spectrum = 20   # choose spectrum 1-20

for j in xrange(0, 19): # for the second half of all spectra
    abs = 0
    abs_Mo = (eps[species1[0]]*(float(conc[species2[0]][j])/concentration))*(path_length)
    abs_MoH2Cl2 = (eps[species1[1]]*(float(conc[species2[1]][j])/concentration))*(path_length)
    abs_MoH2Cl3 = (eps[species1[2]]*(float(conc[species2[2]][j])/concentration))*(path_length)
    abs_MoH = (eps[species1[3]]*(float(conc[species2[3]][j])/concentration))*(path_length)
    abs_MoHCl = (eps[species1[4]]*(float(conc[species2[4]][j])/concentration))*(path_length)
    abs = abs_Mo + abs_MoH2Cl2 + abs_MoH2Cl3 + abs_MoH + abs_MoHCl
    plt.plot(x, abs_Mo, ':', x, abs_MoH2Cl2, ":", x, abs_MoH2Cl3, ':', x, abs_MoH, ':', x, abs_MoHCl,':', x, abs)

plt.title('Backcalculated Abs, High Mo')
plt.legend(species1, loc='best')
plt.show()


# Import and plot raw 20mM Mo data for comparison to simulation
raw = pd.read_csv('P:\Desktop/epsilons/high_raw.csv')
x_raw= raw.iloc[:, 0]  # x value is wavelength
raw = raw.set_index('Unnamed: 0')
conc_times_path = 0.02/10

for i in xrange(len(list(raw))):   # plot all columns
    plt.plot(x_raw, raw.iloc[:, i], '-')

plt.xlabel('wavelength (nm)')
plt.ylabel('Abs')
plt.show()


# Input and plot the HypSpec calculated spectral intensities
data2b =  pd.read_csv('P:\Desktop/epsilons/intensities.csv')
xx = data2b.iloc[:, 0]  # x value is wavelength
data2b = data2b.set_index('wavelength(nm)')


# Interpolate the calculated species to match epsilon datapoints
number_of_datapoints = len(data1.iloc[:,0])
xnew = np.linspace(float(x[0]), float(HCl_activity[len(x)-1]), num=number_of_datapoints, endpoint=True)
color1 = ['bo', 'go', 'ro', 'co', 'mo']
color2 = ['b--', 'g--', 'r--', 'c--', 'm--']
data3=[[]]*len(species)

for i in range(len(species)):
    f = interp1d(HCl_activity, data2[species[i]]/total, kind='cubic')
    ynew = f(xnew)
    data3[i] = ynew
    plt.plot(HCl_activity, data2[species[i]]/total, color1[i], xnew, ynew, color2[i])

plt.legend(['data', 'cubic interpolation'], loc='best')
plt.show()
